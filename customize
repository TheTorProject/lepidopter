#!/bin/sh

set -e # Exit on first error

OONIPROBE_PATH="/root/ooni-probe"
ROOTDIR="$1"

# Install non-free binary blob needed to boot Raspberry Pi.  
# This install a kernel somewhere too.
wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update \
    -O ${ROOTDIR}/usr/bin/rpi-update
chmod a+x ${ROOTDIR}/usr/bin/rpi-update
mkdir -p ${ROOTDIR}/lib/modules
touch ${ROOTDIR}/boot/start.elf
# Disable self update, issues with curl and ca-certificates in chroot
export UPDATE_SELF=0 
chroot ${ROOTDIR} rpi-update

# lepidopter raspi-config
wget -O ${ROOTDIR}/sbin/raspi-config \
https://github.com/anadahz/raspi-config_lepidopter/raw/master/raspi-config
chmod +x ${ROOTDIR}/sbin/raspi-config

# Network configuration
cat <<EOF > ${ROOTDIR}/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

# ooniprobe setup script
cat <<EOF > ${ROOTDIR}/setup-ooniprobe.sh
#!/bin/bash

# Building ooniprobe
git clone https://github.com/TheTorProject/ooni-probe.git ${OONIPROBE_PATH}
cd ${OONIPROBE_PATH}
# Install ooniprobe dependencies
./setup-dependencies.sh -p -y
python setup.py install
history -c
EOF

chmod +x ${ROOTDIR}/setup-ooniprobe.sh
chroot ${ROOTDIR} /setup-ooniprobe.sh
rm ${ROOTDIR}/setup-ooniprobe.sh

# Adding module for hardware RNG
cat <<EOF >> ${ROOTDIR}/etc/modules
bcm2708_rng
EOF

# Regenerate SSH keys SYSV script
cat <<'EOF' > ${ROOTDIR}/etc/init.d/regenerate_ssh_host_keys
#!/bin/sh
### BEGIN INIT INFO
# Provides:          regenerate_ssh_host_keys
# Required-Start:    $local_fs $remote_fs 
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Regenerate ssh host keys
# Description: This script will regenerate the host SSH keys.
### END INIT INFO

. /lib/lsb/init-functions

set -e

case "$1" in
  start)
    log_daemon_msg "Regenerating ssh host keys..."
    dpkg-reconfigure openssh-server
    log_daemon_msg "Remove regenerate_ssh_host_keys SYSV links..."
    update-rc.d regenerate_ssh_host_keys remove
    log_daemon_msg "Enable SSH Service..."
    update-rc.d ssh enable
    log_daemon_msg "Start SSH Daemon..."
    service ssh start
    log_end_msg $?
    ;;
  *)
    log_success_msg "Usage: $0 start "
    exit 3
    ;;
esac

exit 0
EOF

# Remove SSH host keys and add regenerate_ssh_host_keys SYSV script
cat <<'EOF' > ${ROOTDIR}/remove_ssh_host_keys.sh
#!/bin/bash
# Re-enables at first boot after regeneration of ssh host keys
update-rc.d ssh disable
rm -f /etc/ssh/ssh_host*
chmod +x /etc/init.d/regenerate_ssh_host_keys
update-rc.d regenerate_ssh_host_keys defaults
history -c
EOF

chmod +x ${ROOTDIR}/remove_ssh_host_keys.sh
chroot ${ROOTDIR} /remove_ssh_host_keys.sh
rm ${ROOTDIR}/remove_ssh_host_keys.sh


cat <<'EOF' > ${ROOTDIR}/configure_ssh_copy_client_key.sh
#!/bin/bash
su -c 'mkdir /home/lepidopter/.ssh' lepidopter
# FIXME: change ssh public key
echo sshpublickeyhere > /home/lepidopter/.ssh/authorized_keys
sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config
sed -i 's|[#]*PermitRootLogin yes|PermitRootLogin no|g' /etc/ssh/sshd_config
sed -i 's|[#]*ListenAddress 0.0.0.0|ListenAddress 127.0.0.1|g' /etc/ssh/sshd_config
history -c
EOF

chmod +x ${ROOTDIR}/configure_ssh_copy_client_key.sh
chroot ${ROOTDIR} /configure_ssh_copy_client_key.sh
rm ${ROOTDIR}/configure_ssh_copy_client_key.sh


cat <<'EOF' > ${ROOTDIR}/etc/init.d/generate_ssh_hs
#!/bin/sh
### BEGIN INIT INFO
# Provides:          generate_ssh_hs
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Generate SSH Hidden Service (HS)
# Description: This script will generate the SSH HS keys and onion address.
### END INIT INFO

# TODO: send ssh hs onion address to a web hidden service,
# something like:
# onionaddress=`cat /home/lepidopter/hs/hostname`
# usewithtor curl http://webserveronionaddress/$onionaddress
# In case tor fail to start, the ssh hs will fail too,
# and the onion address won't be send to the web hidden service

. /lib/lsb/init-functions

set -e

case "$1"
  in  start)
    log_daemon_msg "Creating ssh HS address..."
    nohup sh -c "if [ ! -d /home/lepidopter/hs ]; then mkdir -p /home/lepidopter/hs; fi && \
      chown debian-tor /home/lepidopter/hs && \
      printf 'HiddenServiceDir /home/lepidopter/hs\nHiddenServicePort 22 127.0.0.1:22' >> /etc/tor/torrc && \
      update-rc.d tor enable && sync && \
      update-rc.d generate_ssh_hs remove && \
      printf '\nfinished\n' && invoke-rc.d tor start" > /var/log/generate_ssh_hs.log 2>&1 &
    log_end_msg $?
    ;;
  *)
    log_success_msg "Usage: $0 start "
    exit 3
    ;;
esac
exit 0
EOF

cat <<'EOF' > ${ROOTDIR}/configure_ssh_hs.sh
#!/bin/bash
echo 'deb http://ftp.de.debian.org/debian wheezy-backports main' > /etc/apt/sources.list.d/backports.list
apt-get update -qq
apt-get install -y tlsdate
apt-get install -y tor
update-rc.d tor disable
chmod 755 /etc/init.d/generate_ssh_hs
update-rc.d generate_ssh_hs defaults
history -c
EOF

chmod +x ${ROOTDIR}/configure_ssh_hs.sh
chroot ${ROOTDIR} /configure_ssh_hs.sh
rm ${ROOTDIR}/configure_ssh_hs.sh

echo "Customize script finished successfully."
